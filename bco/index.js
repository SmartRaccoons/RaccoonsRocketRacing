// Generated by CoffeeScript 1.8.0
(function() {
  var Backbone, BcoCore, Vector, _;

  _ = typeof require !== 'undefined' ? require('lodash') : window._;

  Backbone = typeof require !== 'undefined' ? require('backbone') : window.Backbone;

  Vector = (function() {
    function Vector() {}

    Vector.prototype.multiply = function(vector, scalar) {
      return [vector[0] * scalar, vector[1] * scalar];
    };

    Vector.prototype.plus = function(v1, v2) {
      return [v1[0] + v2[0], v1[1] + v2[1]];
    };

    Vector.prototype.magnitude = function(v) {
      return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
    };

    Vector.prototype.create = function(angle, length) {
      return [Math.cos(angle) * length, Math.sin(angle) * length];
    };

    Vector.prototype.accelerate = function(v, speed, angle, max) {
      var magnitude;
      v = this.plus(v, this.create(angle, speed));
      magnitude = this.magnitude(v);
      if (max < magnitude) {
        return this.multiply(v, max / magnitude);
      }
      return v;
    };

    return Vector;

  })();

  (typeof module !== 'undefined' ? module.exports : window).BcoCore = BcoCore = (function() {
    _.extend(BcoCore.prototype, Backbone.Events);

    BcoCore.prototype.vector = new Vector();

    BcoCore.prototype.size = [416, 416];

    function BcoCore() {
      this._elements = {};
    }

    BcoCore.prototype._collides = function(x, y, r, b, x2, y2, r2, b2) {
      return !(r <= x2 || x >= r2 || b <= y2 || y >= b2);
    };

    BcoCore.prototype._collides_ob = function(val, val2) {
      return this._collides(val.pos[0], val.pos[1], val.pos[0] + val.size[0], val.pos[1] + val.size[1], val2.pos[0], val2.pos[1], val2.pos[0] + val2.size[0], val2.pos[1] + val2.size[1]);
    };

    BcoCore.prototype.__requestAnimFrame = function(callback) {
      var fn;
      fn = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
      if (fn) {
        return fn(callback);
      }
      return window.setTimeout(callback, 1000 / 30);
    };

    BcoCore.prototype.restart = function() {
      return this._elements = {};
    };

    BcoCore.prototype.add = function(pr) {
      return this._elements[pr.id] = pr;
    };

    BcoCore.prototype.add_user = function(user_id, params) {
      if (params == null) {
        params = {};
      }
      params['object'] = 'user';
      params['params'] = {
        'user_id': user_id
      };
      return this.add(params);
    };

    BcoCore.prototype.get = function(pr) {
      var elements, id, param, passed, val, value, _ref;
      if (typeof pr === 'number') {
        return this._elements[pr];
      }
      elements = [];
      _ref = this._elements;
      for (id in _ref) {
        val = _ref[id];
        passed = true;
        for (param in pr) {
          value = pr[param];
          if (passed && val[param] !== value) {
            passed = false;
          }
        }
        if (passed) {
          elements.push(val);
        }
      }
      return elements;
    };

    BcoCore.prototype.get_user = function(user_id) {
      var id, val, _ref;
      _ref = this._elements;
      for (id in _ref) {
        val = _ref[id];
        if (val.params.user_id === user_id) {
          return val;
        }
      }
      return null;
    };

    BcoCore.prototype.update = function(pr) {
      var attr, val, _results;
      _results = [];
      for (attr in pr) {
        val = pr[attr];
        if (attr !== 'id') {
          _results.push(this._elements[pr['id']][attr] = val);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    BcoCore.prototype.destroy = function(pr) {
      return delete this._elements[pr.id];
    };

    BcoCore.prototype.start = function() {
      this._stop = false;
      this._lastTime = Date.now();
      return this._process();
    };

    BcoCore.prototype.stop = function() {
      return this._stop = true;
    };

    BcoCore.prototype._process = function() {
      var dt, now;
      now = Date.now();
      dt = now - this._lastTime;
      if (dt > 0) {
        this._updateView(dt);
      }
      this._lastTime = now;
      return this.__requestAnimFrame((function(_this) {
        return function() {
          if (!_this._stop) {
            return _this._process();
          }
        };
      })(this));
    };

    BcoCore.prototype._updateView = function(dt) {
      var el, id, _ref;
      _ref = this._elements;
      for (id in _ref) {
        el = _ref[id];
        if (el.accelerator && el.moving.indexOf('up') > -1) {
          el.vel = this.vector.accelerate(el.vel, dt * el.accelerator, el.angle, el.speed);
        } else if (el.rub) {
          el.vel = this.vector.multiply(el.vel, Math.pow(el.rub, dt));
        }
        if (el.vel[0] !== 0 || el.vel[1] !== 0) {
          el.pos = this.vector.plus(el.pos, this.vector.multiply(el.vel, dt));
        }
      }
      return this;
    };

    return BcoCore;

  })();

}).call(this);

//# sourceMappingURL=index.js.map
