// Generated by CoffeeScript 1.6.3
(function() {
  describe('Rooms', function() {
    var r;
    r = null;
    beforeEach(function() {
      r = new App.Rooms({
        'monitor': 1,
        'stages': {
          1: 'stage 1',
          2: 'stage 2'
        }
      });
      return r.$el.appendTo(document.body);
    });
    afterEach(function() {
      return r.remove();
    });
    return describe('render rooms', function() {
      it('add/remove room', function() {
        r.render();
        expect(r.$('>li')).to.have.length(0);
        r.room_add({
          'id': 1,
          'name': 'Beni',
          'max': 2,
          'stage': 1,
          'users': [
            {
              'id': 10,
              'name': ''
            }
          ]
        });
        r.room_add({
          'id': 2,
          'name': 'Bon',
          'max': 10,
          'stage': 2,
          'users': []
        });
        expect(r.$('>li').length).to.be(2);
        expect(r.$('>li:eq(0)').attr('data-pk')).to.be('2');
        expect(r.$('>li:eq(0)').attr('data-max')).to.be('10');
        expect(r.$('>li:eq(0)').attr('data-users')).to.be('0');
        expect(r.$('>li:eq(1)').attr('data-pk')).to.be('1');
        expect(r.$('>li:eq(1)').attr('data-max')).to.be('2');
        expect(r.$('>li:eq(1)').attr('data-users')).to.be('1');
        expect(r.$('>li:eq(0)>ul>li:nth-child(1)').html()).to.be('Bon');
        expect(r.$('>li:eq(1)>ul>li:nth-child(1)').html()).to.be('Beni');
        expect(r.$('>li:eq(0)>ul>li:nth-child(2)').text()).to.be('0/10');
        expect(r.$('>li:eq(1)>ul>li:nth-child(2)').text()).to.be('1/2');
        expect(r.$('>li:eq(0)>ul>li:nth-child(3)').text()).to.be('stage 2');
        expect(r.$('>li:eq(1)>ul>li:nth-child(3)').text()).to.be('stage 1');
        r.room_remove({
          'id': 1
        });
        expect(r.$('>li').length).to.be(1);
        return expect(r.rooms[1]).to.be(void 0);
      });
      it('add/remove user', function() {
        r.render();
        r.room_add({
          'id': 1,
          stage: 1,
          max: 2,
          'users': []
        });
        expect(r.$('>li:eq(0)').attr('data-users')).to.be('0');
        expect(r.$('>li:eq(0)>ul>li:nth-child(2)').text()).to.be('0/2');
        r.user_join({
          'room_id': 1,
          'user': {
            'id': 3,
            'name': 'Ze'
          }
        });
        expect(r.$('>li:eq(0)').attr('data-users')).to.be('1');
        expect(r.$('>li:eq(0)>ul>li:nth-child(2)').text()).to.be('1/2');
        r.user_left({
          'room_id': 1,
          'user_id': 4
        });
        expect(r.$('>li:eq(0)').attr('data-users')).to.be('0');
        return expect(r.$('>li:eq(0)>ul>li:nth-child(2)').text()).to.be('0/2');
      });
      it('trigger open', function() {
        var spy;
        r.render([
          {
            'id': 1,
            'stage': 1,
            'users': []
          }
        ]);
        r.room_add({
          'id': 2,
          'stage': 1,
          'users': []
        });
        spy = sinon.spy();
        r.on('open', spy);
        r.$('>li[data-pk="1"]').click();
        expect(spy.callCount).to.be(1);
        return expect(spy.getCall(0).args[0]).to.be(1);
      });
      it('monitor id on join', function() {
        var spy;
        spy = sinon.spy();
        r.on('monitor:add', spy);
        r.render([
          {
            'id': 1,
            'stage': 1,
            'users': [
              {
                'id': 1,
                'name': ''
              }
            ]
          }
        ]);
        r.user_join({
          'room_id': 1,
          'user': {
            'id': 2,
            'name': ''
          }
        });
        return expect(spy.callCount).to.be(1);
      });
      it('monitor id on remove user', function() {
        var spy;
        r.render([]);
        spy = sinon.spy();
        r.on('monitor:remove', spy);
        r.render([
          {
            'id': 1,
            'stage': 1,
            'users': [
              {
                'id': 1,
                'name': ''
              }, {
                'id': 2,
                'name': ''
              }
            ]
          }
        ]);
        r.user_left({
          'room_id': 1,
          'user_id': 2
        });
        r.user_left({
          'room_id': 1,
          'user_id': 1
        });
        return expect(spy.callCount).to.be(1);
      });
      it('monitor id on remove room', function() {
        var spy;
        spy = sinon.spy();
        r.on('monitor:remove', spy);
        r.render([
          {
            'id': 1,
            'stage': 1,
            'users': [
              {
                'id': 1,
                'name': ''
              }
            ]
          }, {
            'id': 2,
            stage: 1,
            'is_full': false,
            'users': []
          }
        ]);
        r.room_remove({
          'id': 2
        });
        r.room_remove({
          'id': 1
        });
        return expect(spy.callCount).to.be(1);
      });
      return it('monitor id on remove room and user', function() {
        var spy;
        spy = sinon.spy();
        r.on('monitor:remove', spy);
        r.render([
          {
            'id': 1,
            'stage': 1,
            'users': [
              {
                'id': 1,
                'name': ''
              }
            ]
          }
        ]);
        r.user_join({
          'room_id': 1,
          'user': {
            'id': 1
          }
        });
        r.room_remove({
          'id': 1
        });
        return expect(spy.callCount).to.be(1);
      });
    });
  });

  describe('Create Room', function() {
    return describe('new room', function() {
      var r, spy;
      r = null;
      spy = null;
      beforeEach(function() {
        r = new App.CreateRoom();
        r.$el.appendTo(document.body);
        r.render();
        spy = sinon.spy();
        return r.on('create', spy);
      });
      afterEach(function() {
        return r.remove();
      });
      return it('trigger event (default)', function() {
        r.$('button').click();
        return expect(spy.callCount).to.be(1);
      });
    });
  });

}).call(this);
