// Generated by CoffeeScript 1.8.0
(function() {
  var BcoCore,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BcoCore = (function(_super) {
    __extends(BcoCore, _super);

    function BcoCore() {
      return BcoCore.__super__.constructor.apply(this, arguments);
    }

    BcoCore.prototype.__requestAnimFrame = function(callback) {
      return window.setTimeout(callback, 1000 / 40);
    };

    return BcoCore;

  })(window.BcoCore);

  describe('BcoCore', function() {
    var b;
    b = null;
    beforeEach(function() {
      return b = new BcoCore();
    });
    afterEach(function() {
      return b = null;
    });
    describe('init', function() {
      return it('size', function() {
        b = new BcoCore();
        return assert.deepEqual(b.size, [416, 416]);
      });
    });
    describe('get', function() {
      it('id', function() {
        b.add({
          'id': 1,
          'name': 'ben'
        });
        b.add({
          'id': 2,
          'name': 'ban'
        });
        assert.equal(b.get(1).name, 'ben');
        return assert.equal(b.get(2).name, 'ban');
      });
      return it('params', function() {
        b.add({
          'id': 1,
          'name': 'ben'
        });
        b.add({
          'id': 2,
          'name': 'ban'
        });
        b.add({
          'id': 3,
          'name': 'ban',
          's': 't'
        });
        assert.equal(b.get({
          'id': 1
        })[0].name, 'ben');
        assert.equal(b.get({
          'name': 'ban'
        })[0].name, 'ban');
        assert.equal(b.get({
          'name': 'ban',
          's': 't'
        })[0].s, 't');
        return assert.deepEqual(b.get({
          'name': 'ban',
          's': 'z'
        }), []);
      });
    });
    describe('add', function() {
      it('to elements', function() {
        b.add({
          'id': 2,
          'speed': 4
        });
        return assert.equal(b.get(2).speed, 4);
      });
      it('add/get user', function() {
        var id;
        id = 5;
        b.add_user('ser', {
          'id': id,
          'pos': [1, 2]
        });
        assert.equal('user', b.get(id).object);
        assert.deepEqual([1, 2], b.get(id).pos);
        assert.equal('ser', b.get(id).params.user_id);
        return assert.equal(id, b.get_user('ser').id);
      });
      return it('get unknown user', function() {
        return assert.equal(null, b.get_user('random'));
      });
    });
    describe('update', function() {
      beforeEach(function() {
        return b.add({
          'id': 1,
          'object': 'benja'
        });
      });
      return it('elements', function() {
        b.update({
          'id': 1,
          'pos': [10, 11],
          'speed': 11
        });
        assert.deepEqual(b.get(1).pos, [10, 11]);
        return assert.equal(b.get(1).speed, 11);
      });
    });
    describe('destroy', function() {
      var id;
      id = 2;
      beforeEach(function() {
        return b.add({
          'object': 'benja',
          'id': id
        });
      });
      it('from elements', function() {
        b.destroy({
          'id': id
        });
        return assert(!b.get(id));
      });
      return it('restart', function() {
        b.restart();
        return assert(!b.get(id));
      });
    });
    describe('process', function() {
      var clock;
      clock = null;
      beforeEach(function() {
        clock = sinon.useFakeTimers();
        return b._elements = {};
      });
      afterEach(function() {
        return clock.restore();
      });
      it('start', function() {
        b._updateView = sinon.spy();
        clock.tick(1000);
        assert.equal(b._updateView.callCount, 0);
        b.start();
        clock.tick(24);
        assert.equal(b._updateView.callCount, 0);
        clock.tick(25);
        assert.equal(b._updateView.callCount, 1);
        assert.equal(b._updateView.getCall(0).args[0], 25);
        clock.tick(100);
        return assert.equal(b._updateView.callCount, 5);
      });
      it('update position', function() {
        b.add({
          'id': 1,
          'object': 'benja',
          'pos': [0, 0],
          'vel': [1, 1]
        });
        b._updateView(2);
        assert.deepEqual(b.get(1).pos, [2, 2]);
        b._updateView(0.5);
        return assert.deepEqual(b.get(1).pos, [2.5, 2.5]);
      });
      it('update velocity', function() {
        b.add({
          'id': 1,
          'object': 'benja',
          'pos': [0, 0],
          angle: 0,
          'vel': [0, 0]
        });
        b._elements[1].accelerator = 10;
        b._elements[1].moving = ['up'];
        b._updateView(1);
        return assert.deepEqual(b.get(1).vel, [10, 0]);
      });
      it('decrease velocity', function() {
        var _ref, _ref1;
        b.add({
          'id': 1,
          'object': 'benja',
          'pos': [0, 0],
          angle: 0,
          'vel': [10, 20]
        });
        b._elements[1].rub = 0.9;
        b._updateView(2);
        assert((8.09 < (_ref = b.get(1).vel[0]) && _ref < 8.11));
        return assert((16.19 < (_ref1 = b.get(1).vel[1]) && _ref1 < 16.21));
      });
      it('update velocity (no moving)', function() {
        b.add({
          'id': 1,
          'object': 'benja',
          'pos': [0, 0],
          'vel': [0, 0]
        });
        b._elements[1].accelerator = 10;
        b._elements[1].moving = [];
        b._updateView(1);
        return assert.deepEqual(b.get(1).vel, [0, 0]);
      });
      it('update angle (right)', function() {
        b.add({
          'id': 1,
          'object': 'benja',
          'pos': [0, 0],
          angle: 0,
          'vel': [10, 20]
        });
        b._elements[1].wheel = 10;
        b._elements[1].moving = ['right'];
        b._updateView(1);
        return assert.deepEqual(b.get(1).angle, 10);
      });
      it('update angle (left)', function() {
        b.add({
          'id': 1,
          'object': 'benja',
          'pos': [0, 0],
          angle: 0,
          'vel': [10, 20]
        });
        b._elements[1].wheel = 10;
        b._elements[1].moving = ['left'];
        b._updateView(1);
        return assert.deepEqual(b.get(1).angle, -10);
      });
      return it('stop', function() {
        b._updateView = sinon.spy();
        b.start();
        clock.tick(25);
        b.stop();
        assert.equal(b._updateView.callCount, 1);
        clock.tick(100);
        assert.equal(b._updateView.callCount, 1);
        b.start();
        clock.tick(25);
        return assert.equal(b._updateView.callCount, 2);
      });
    });
    return describe('collides', function() {
      it('top', function() {
        assert(!b._collides(2, 0, 8, 9, 0, 10, 10, 20));
        assert(!b._collides(2, 0, 8, 10, 0, 10, 10, 20));
        return assert(b._collides(2, 0, 8, 11, 0, 10, 10, 20));
      });
      it('bottom', function() {
        assert(!b._collides(2, 21, 8, 22, 0, 10, 10, 20));
        assert(!b._collides(2, 20, 8, 22, 0, 10, 10, 20));
        return assert(b._collides(2, 19, 8, 22, 0, 10, 10, 20));
      });
      it('left', function() {
        assert(!b._collides(0, 2, 9, 8, 10, 0, 20, 10));
        assert(!b._collides(0, 2, 10, 8, 10, 0, 20, 10));
        return assert(b._collides(0, 2, 11, 8, 10, 0, 20, 10));
      });
      return it('right', function() {
        assert(!b._collides(21, 2, 30, 8, 10, 0, 20, 10));
        assert(!b._collides(20, 2, 30, 8, 10, 0, 20, 10));
        return assert(b._collides(19, 2, 30, 8, 10, 0, 20, 10));
      });
    });
  });

}).call(this);

//# sourceMappingURL=test.bco.js.map
