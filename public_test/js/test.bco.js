// Generated by CoffeeScript 1.8.0
(function() {
  var BcoCore,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BcoCore = (function(_super) {
    __extends(BcoCore, _super);

    function BcoCore() {
      return BcoCore.__super__.constructor.apply(this, arguments);
    }

    BcoCore.prototype.__requestAnimFrame = function(callback) {
      return window.setTimeout(callback, 1000 / 40);
    };

    return BcoCore;

  })(window.BcoCore);

  describe('BcoCore', function() {
    var b;
    b = null;
    beforeEach(function() {
      return b = new BcoCore();
    });
    afterEach(function() {
      return b = null;
    });
    describe('init', function() {
      return it('size', function() {
        b = new BcoCore();
        return assert.deepEqual(b.size, [416, 416]);
      });
    });
    describe('get', function() {
      it('id', function() {
        b.add({
          'id': 1,
          'name': 'ben'
        });
        b.add({
          'id': 2,
          'name': 'ban'
        });
        assert.equal(b.get(1).name, 'ben');
        return assert.equal(b.get(2).name, 'ban');
      });
      return it('params', function() {
        b.add({
          'id': 1,
          'name': 'ben'
        });
        b.add({
          'id': 2,
          'name': 'ban'
        });
        b.add({
          'id': 3,
          'name': 'ban',
          's': 't'
        });
        assert.equal(b.get({
          'id': 1
        })[0].name, 'ben');
        assert.equal(b.get({
          'name': 'ban'
        })[0].name, 'ban');
        assert.equal(b.get({
          'name': 'ban',
          's': 't'
        })[0].s, 't');
        return assert.deepEqual(b.get({
          'name': 'ban',
          's': 'z'
        }), []);
      });
    });
    describe('add', function() {
      return it('to elements', function() {
        b.add({
          'id': 2,
          'speed': 4
        });
        return assert.equal(b.get(2).speed, 4);
      });
    });
    describe('update', function() {
      beforeEach(function() {
        return b.add({
          'id': 1,
          'object': 'benja'
        });
      });
      return it('elements', function() {
        b.update({
          'id': 1,
          'pos': [10, 11],
          'speed': 11
        });
        assert.deepEqual(b.get(1).pos, [10, 11]);
        return assert.equal(b.get(1).speed, 11);
      });
    });
    describe('destroy', function() {
      var id;
      id = 2;
      beforeEach(function() {
        return b.add({
          'object': 'benja',
          'id': id
        });
      });
      it('from elements', function() {
        b.destroy({
          'id': id
        });
        return assert(!b.get(id));
      });
      return it('restart', function() {
        b.restart();
        return assert(!b.get(id));
      });
    });
    describe('process', function() {
      var clock;
      clock = null;
      beforeEach(function() {
        clock = sinon.useFakeTimers();
        return b._elements = {};
      });
      afterEach(function() {
        return clock.restore();
      });
      it('start', function() {
        b._updateView = sinon.spy();
        clock.tick(1000);
        assert.equal(b._updateView.callCount, 0);
        b.start();
        clock.tick(24);
        assert.equal(b._updateView.callCount, 0);
        clock.tick(25);
        assert.equal(b._updateView.callCount, 1);
        assert.equal(b._updateView.getCall(0).args[0], 0.025);
        clock.tick(100);
        return assert.equal(b._updateView.callCount, 5);
      });
      it('update position', function() {
        b.add({
          'id': 1,
          'object': 'benja',
          'speed': 10,
          'angle': 0,
          'pos': [0, 0],
          'stuck': 1
        });
        b._updateView(1);
        assert.deepEqual(b.get(1).pos, [10, 0]);
        b._updateView(0.5);
        assert.deepEqual(b.get(1).pos, [15, 0]);
        b.update({
          'id': 1,
          'angle': 90,
          'pos': [0, 0]
        });
        b._updateView(0.5);
        assert.deepEqual(b.get(1).pos, [0, 5]);
        b.update({
          'id': 1,
          'angle': 45,
          'pos': [0, 0]
        });
        b._updateView(1);
        return assert.deepEqual(b.get(1).pos, [7.07, 7.07]);
      });
      return it('stop', function() {
        b._updateView = sinon.spy();
        b.start();
        clock.tick(25);
        b.stop();
        assert.equal(b._updateView.callCount, 1);
        clock.tick(100);
        assert.equal(b._updateView.callCount, 1);
        b.start();
        clock.tick(25);
        return assert.equal(b._updateView.callCount, 2);
      });
    });
    describe('stop out of box', function() {
      beforeEach(function() {
        b._elements = {};
        b.add({
          'id': 1,
          'object': 'tank',
          'speed': 10,
          'destroy': 0,
          'angle': 0,
          'size': [32, 32],
          'pos': [0, 0]
        });
        return b.add({
          'id': 5,
          'object': 'brick',
          'speed': 0,
          'destroy': 0,
          'angle': 0,
          'pos': [100, 100],
          'size': [16, 16]
        });
      });
      it('left', function() {
        b.get(1).angle = 180;
        b.get(1).pos = [1, 0];
        b._updateView(1);
        return assert.deepEqual(b.get(1).pos, [0, 0]);
      });
      it('right', function() {
        b.get(1).pos = [b.size[0] - b.get(1).size[0] - 1, 0];
        b._updateView(1);
        return expect(b.get(1).pos, [b.size[0] - b.get(1).size[0], 0]);
      });
      it('up', function() {
        b.get(1).angle = 270;
        b.get(1).pos = [0, 1];
        b._updateView(1);
        return assert.deepEqual(b.get(1).pos, [0, 0]);
      });
      it('down', function() {
        b.get(1).angle = 90;
        b.get(1).pos = [0, b.size[1] - b.get(1).size[1] - 1];
        b._updateView(1);
        return assert.deepEqual(b.get(1).pos, [0, b.size[1] - b.get(1).size[1]]);
      });
      return it('destroy param', function() {
        b.get(1).destroy = 1;
        b.get(1).angle = 180;
        b.get(1).pos = [1, 0];
        b._updateView(1);
        return assert.deepEqual(b.get(1).pos, [-9, 0]);
      });
    });
    describe('stop on collides', function() {
      var clock, object;
      clock = null;
      object = 5;
      beforeEach(function() {
        clock = sinon.useFakeTimers();
        b._elements = {};
        b.add({
          'id': 1,
          'object': 'tank',
          'speed': 10,
          'destroy': 0,
          'angle': 0,
          'size': [32, 32],
          'pos': [0, 0]
        });
        return b.add({
          'id': 5,
          'object': 'brick',
          'speed': 0,
          'destroy': 0,
          'angle': 0,
          'pos': [100, 100],
          'size': [16, 16]
        });
      });
      afterEach(function() {
        return clock.restore();
      });
      it('over elements', function() {
        b.add({
          'id': 2,
          'object': 'brick',
          'speed': 0,
          'destroy': 0,
          'angle': 0,
          'size': [16, 16],
          'pos': [34, 0]
        });
        b._updateView(0.1);
        assert.deepEqual(b.get(1).pos, [1, 0]);
        b._updateView(0.4);
        return assert.deepEqual(b.get(1).pos, [2, 0]);
      });
      it('destroy param', function() {
        b.get(1).pos = [0, 0];
        b.add({
          'id': 3,
          'object': 'bullet',
          'speed': 20,
          'angle': 0,
          'size': [8, 8],
          'pos': [0, 0],
          'destroy': 1
        });
        b._updateView(0.2);
        assert.deepEqual(b.get(1).pos, [2, 0]);
        return assert.deepEqual(b.get(3).pos, [4, 0]);
      });
      it('over element from left', function() {
        b.get(object).pos = [34, 0];
        b.get(1).pos = [0, 1];
        b._updateView(1);
        return assert.deepEqual(b.get(1).pos, [2, 1]);
      });
      it('over element from right', function() {
        b.get(1).angle = 180;
        b.get(1).pos = [17, 1];
        b.get(object).pos = [0, 0];
        b._updateView(1);
        return assert.deepEqual(b.get(1).pos, [16, 1]);
      });
      it('over element from top', function() {
        b.get(1).angle = 90;
        b.get(object).pos = [0, 34];
        b._updateView(1);
        return assert.deepEqual(b.get(1).pos, [0, 2]);
      });
      return it('over element from bottom', function() {
        b.get(1).angle = 270;
        b.get(1).pos = [0, 17];
        b.get(object).pos = [0, 0];
        b._updateView(1);
        return assert.deepEqual(b.get(1).pos, [0, 16]);
      });
    });
    return describe('collides', function() {
      it('top', function() {
        assert(!b._collides(2, 0, 8, 9, 0, 10, 10, 20));
        assert(!b._collides(2, 0, 8, 10, 0, 10, 10, 20));
        return assert(b._collides(2, 0, 8, 11, 0, 10, 10, 20));
      });
      it('bottom', function() {
        assert(!b._collides(2, 21, 8, 22, 0, 10, 10, 20));
        assert(!b._collides(2, 20, 8, 22, 0, 10, 10, 20));
        return assert(b._collides(2, 19, 8, 22, 0, 10, 10, 20));
      });
      it('left', function() {
        assert(!b._collides(0, 2, 9, 8, 10, 0, 20, 10));
        assert(!b._collides(0, 2, 10, 8, 10, 0, 20, 10));
        return assert(b._collides(0, 2, 11, 8, 10, 0, 20, 10));
      });
      return it('right', function() {
        assert(!b._collides(21, 2, 30, 8, 10, 0, 20, 10));
        assert(!b._collides(20, 2, 30, 8, 10, 0, 20, 10));
        return assert(b._collides(19, 2, 30, 8, 10, 0, 20, 10));
      });
    });
  });

}).call(this);
