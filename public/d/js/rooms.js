// Generated by CoffeeScript 1.6.3
(function() {
  var CreateRoom, Room, RoomPreview, Rooms, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App.Rooms = Rooms = (function(_super) {
    __extends(Rooms, _super);

    function Rooms() {
      _ref = Rooms.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Rooms.prototype.tagName = 'ol';

    Rooms.prototype.rooms = {};

    Rooms.prototype.events = {
      'click >li': function(e) {
        return this.trigger('open', parseInt($(e.target).attr('data-pk')));
      }
    };

    Rooms.prototype.room_add = function(data) {
      var r,
        _this = this;
      r = new Room();
      r.rooms = this;
      this.listenTo(r, 'monitor:add', function() {
        return _this.trigger('monitor:add');
      });
      this.listenTo(r, 'monitor:remove', function() {
        return _this.trigger('monitor:remove');
      });
      r.render(data);
      r.$el.prependTo(this.$el);
      return this.rooms[data.id] = r;
    };

    Rooms.prototype.room_remove = function(data) {
      this.rooms[data.id].remove();
      return delete this.rooms[data.id];
    };

    Rooms.prototype.user_join = function(data) {
      return this.rooms[data.room_id].user_add(data.user);
    };

    Rooms.prototype.user_left = function(data) {
      return this.rooms[data.room_id].user_left(data.user_id);
    };

    Rooms.prototype.list = function(rooms) {
      return this.render(rooms);
    };

    Rooms.prototype.render = function(rooms) {
      var _this = this;
      _.each(this.rooms, function(r, i) {
        return _this.room_remove({
          'id': i
        });
      });
      return _.each(rooms, _.bind(this.room_add, this));
    };

    return Rooms;

  })(Backbone.View);

  Room = (function(_super) {
    __extends(Room, _super);

    function Room() {
      _ref1 = Room.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Room.prototype.tagName = 'li';

    Room.prototype.template = _.template("<strong><%=name%></strong>\n<span><%=self.rooms.options.stages[stage]%></span>");

    Room.prototype.user_add = function(user) {
      this._users += 1;
      this._update_users();
      if (user.id === this.rooms.options.monitor) {
        this.trigger('monitor:add');
        return this._monitor = true;
      }
    };

    Room.prototype.user_left = function(user) {
      this._users -= 1;
      this._update_users();
      if (user === this.rooms.options.monitor) {
        this._monitor = false;
        return this.trigger('monitor:remove');
      }
    };

    Room.prototype._update_users = function() {
      return this.$el.attr('data-users', this._users);
    };

    Room.prototype.render = function(data) {
      Room.__super__.render.apply(this, arguments);
      this._users = 0;
      this._max = data.max;
      this.$el.attr('data-pk', data.id);
      this.$el.attr('data-max', data.max);
      this._update_users();
      return _.each(data.users, _.bind(this.user_add, this));
    };

    Room.prototype.remove = function() {
      if (this._monitor) {
        this.trigger('monitor:remove');
      }
      return Room.__super__.remove.apply(this, arguments);
    };

    return Room;

  })(Backbone.View);

  App.RoomPreview = RoomPreview = (function(_super) {
    __extends(RoomPreview, _super);

    function RoomPreview() {
      _ref2 = RoomPreview.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    RoomPreview.prototype.template = _.template("<div id=\"map-preview\">\n	<div class=\"preview\">\n		<div class=\"img\"><img alt=\"map\" src=\"map.png\" /></div>\n		<div class=\"info map-name\">Super duper Mapka</div>\n		<div class=\"info timer\">05:47</div>\n		<div class=\"info users\">5/10</div>\n	</div>\n	<div class=\"link\"><input type=\"text\" value=\"http://countertank.com/#map/superMapka\" /></div>\n	<ol class=\"t t-s\">\n\n		<li class=\"map\">\n			<ul class=\"c\">\n				<li class=\"l w49 name\">Super user</li>\n				<li class=\"r w25 depth\">10</li>\n				<li class=\"r w25 kill\">12</li>\n			</ul>\n		</li>\n\n	</ol>\n	<div class=\"join\">Join</div>\n</div>");

    return RoomPreview;

  })(Backbone.View);

  App.CreateRoom = CreateRoom = (function(_super) {
    __extends(CreateRoom, _super);

    function CreateRoom() {
      _ref3 = CreateRoom.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    CreateRoom.prototype.className = 'room-new-add';

    CreateRoom.prototype.template = _.template("<button><%=_l('Create room')%></button>");

    CreateRoom.prototype.events = {
      'click button': function() {
        return this.trigger('create');
      }
    };

    return CreateRoom;

  })(Backbone.View);

}).call(this);
