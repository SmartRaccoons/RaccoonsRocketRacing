// Generated by CoffeeScript 1.6.3
(function() {
  var Room, Rooms, User, Users, root, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  if (!root.Backbone && (typeof exports !== "undefined" && exports !== null)) {
    root.Backbone = require('backbone');
  }

  User = (function(_super) {
    __extends(User, _super);

    function User() {
      _ref = User.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    User.prototype._main_attr = ['id'];

    User.prototype._main_own_attr = ['id', 'name'];

    User.prototype.defaults = {
      'name': ''
    };

    User.prototype.sync = function() {};

    User.prototype.user_data = function(own) {
      var attr, v, _i, _len, _ref1;
      if (own == null) {
        own = false;
      }
      attr = {};
      _ref1 = (own ? this._main_own_attr : this._main_attr);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        attr[v] = v in this.attributes ? this.attributes[v] : this[v]();
      }
      return attr;
    };

    User.prototype.is_authenticated = function() {
      return !!this.get('id');
    };

    return User;

  })(root.Backbone.Model);

  root.Users = Users = (function(_super) {
    __extends(Users, _super);

    function Users() {
      _ref1 = Users.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Users.prototype.model = User;

    return Users;

  })(root.Backbone.Collection);

  Room = (function(_super) {
    __extends(Room, _super);

    function Room() {
      _ref2 = Room.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Room.prototype.defaults = {
      users: []
    };

    Room.prototype.initialize = function() {
      var u, _i, _len, _ref3, _results;
      _ref3 = this.get('users');
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        u = _ref3[_i];
        _results.push(this._add_user(u));
      }
      return _results;
    };

    Room.prototype.is_full = function() {
      return this.get('users').length === this.get('max');
    };

    Room.prototype._add_user = function(u) {
      return u.set('room', this);
    };

    Room.prototype.join_user = function(user) {
      this._add_user(user);
      this.get('users').push(user);
      return this.collection.trigger('user:join', this, user);
    };

    Room.prototype.left_user = function(user) {
      var u, users, _i, _len, _ref3;
      users = [];
      _ref3 = this.get('users');
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        u = _ref3[_i];
        if (u.id !== user.id) {
          users.push(u);
        }
      }
      this.set('users', users);
      u.set('room', null);
      return this.collection.trigger('user:left', this, user);
    };

    Room.prototype.toJSON = function() {
      return {
        'id': this.id,
        'max': this.get('max'),
        'users': this.get('users').map(function(u) {
          return u.user_data();
        })
      };
    };

    return Room;

  })(root.Backbone.Model);

  root.Rooms = Rooms = (function(_super) {
    __extends(Rooms, _super);

    function Rooms() {
      _ref3 = Rooms.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Rooms.prototype.model = Room;

    Rooms.prototype.initialize = function(models, opt) {
      this._id = 1;
      this._max = opt && opt['max'] || 2;
      this.on('remove', function(r) {
        return r.get('users').forEach(function(u) {
          return u.set('room', null);
        });
      });
      return this;
    };

    Rooms.prototype.add = function() {
      var args;
      args = Array.prototype.slice.call(arguments);
      if (!args[0].id) {
        args[0].id = this._id++;
      }
      if (!args[0].max) {
        args[0].max = this._max;
      }
      return root.Backbone.Collection.prototype.add.apply(this, args);
    };

    Rooms.prototype.join_user = function(room_id, user) {
      var r, room, u, _i, _j, _len, _len1, _ref4, _ref5;
      room = this.get(room_id);
      if (room == null) {
        throw new Error('wrong room');
      }
      _ref4 = this.models;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        r = _ref4[_i];
        _ref5 = r.get('users');
        for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
          u = _ref5[_j];
          if (user.id === u.id) {
            throw new Error('user in room');
          }
        }
      }
      if (room.is_full()) {
        throw new Error('full room');
      }
      return room.join_user(user);
    };

    Rooms.prototype.left_user = function(user) {
      var room;
      room = this.by_user(user);
      if (!room) {
        throw new Error('not in room');
      }
      room.left_user(user);
      if (room.get('users').length === 0) {
        this.remove(room);
        return room = null;
      }
    };

    Rooms.prototype.by_user = function(user) {
      var r, u, _i, _j, _len, _len1, _ref4, _ref5;
      _ref4 = this.models;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        r = _ref4[_i];
        _ref5 = r.get('users');
        for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
          u = _ref5[_j];
          if (u.id === user.id) {
            return r;
          }
        }
      }
      return null;
    };

    Rooms.prototype.toJSON = function() {
      return this.map(function(r) {
        return r.toJSON();
      });
    };

    return Rooms;

  })(root.Backbone.Collection);

}).call(this);
