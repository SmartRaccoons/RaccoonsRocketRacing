// Generated by CoffeeScript 1.6.3
(function() {
  var Rooms, Users, assert, sinon;

  assert = require("assert");

  sinon = require('sinon');

  this.code = require('../');

  Users = this.code.Users;

  Rooms = this.code.Rooms;

  describe('Users', function() {
    beforeEach(function() {
      this.users = new Users;
      return this.authorize_data = {
        'id': 2,
        'name': 'Beni'
      };
    });
    return describe('methods', function() {
      it('user_data', function() {
        this.users.add(this.authorize_data);
        assert.deepEqual({
          'id': 2,
          'name': 'Beni'
        }, this.users.models[0].user_data());
        return assert.deepEqual({
          'id': 2,
          'name': 'Beni'
        }, this.users.models[0].user_data(true));
      });
      return it('is_authenticated', function() {
        this.users.add({
          'socket': {}
        });
        assert.equal(false, this.users.models[0].is_authenticated());
        this.users.models[0].set('id', 2);
        return assert.equal(true, this.users.models[0].is_authenticated());
      });
    });
  });

  describe('Rooms', function() {
    beforeEach(function() {
      this.users = new Users();
      this.users.add({
        'id': 'unique',
        'name': 'lietotajs 1'
      });
      this.users.add({
        'id': 'unique 2',
        'name': 'lietotajs 2'
      });
      this.users.add({
        'id': 'unique 3',
        'name': 'lietotajs 3'
      });
      return this.users.add({
        'id': 'unique 4',
        'name': 'lietotajs 4'
      });
    });
    describe('new room', function() {
      it('join user errors', function() {
        var rooms,
          _this = this;
        rooms = new Rooms();
        rooms.add({
          'id': 'bena',
          'users': [this.users.models[0]],
          'creator': this.users.models[0]
        });
        rooms.add({
          'id': '2',
          'users': [this.users.models[1]],
          'creator': this.users.models[1]
        });
        assert.throws((function() {
          return rooms.join_user('no', _this.users.models[2]);
        }), Error, 'wrong room');
        assert.throws((function() {
          return rooms.join_user('2', _this.users.models[1]);
        }), Error, 'user in room');
        assert.throws((function() {
          return rooms.join_user('bena', _this.users.models[1]);
        }), Error, 'user in room');
        return assert.doesNotThrow((function() {
          return rooms.join_user('bena', _this.users.models[2]);
        }));
      });
      it('left user errors', function() {
        var rooms,
          _this = this;
        rooms = new Rooms();
        rooms.add({
          'id': 'bena',
          'users': [this.users.models[0]],
          'creator': this.users.models[0]
        });
        assert.throws((function() {
          return rooms.left_user(_this.users.models[1]);
        }), Error, 'not in room');
        return assert.doesNotThrow((function() {
          return rooms.left_user(_this.users.models[0]);
        }));
      });
      it('join user', function() {
        var rooms, spy;
        rooms = new Rooms();
        spy = sinon.spy();
        rooms.on('user:join', spy);
        rooms.add({
          'id': 'bena',
          'users': [this.users.models[0]],
          'creator': this.users.models[0]
        });
        assert.equal(rooms.models[0].id, this.users.models[0].get('room').id);
        rooms.join_user('bena', this.users.models[1]);
        assert.equal(rooms.models[0].id, this.users.models[1].get('room').id);
        assert.equal('bena', spy.getCall(0).args[0].get('id'));
        assert.equal('unique 2', spy.getCall(0).args[1].get('id'));
        assert.equal(1, spy.callCount);
        return assert.equal(rooms.get('bena').get('users').length, 2);
      });
      it('left user', function() {
        var rooms, spy;
        rooms = new Rooms();
        spy = sinon.spy();
        rooms.on('user:left', spy);
        rooms.add({
          'id': 'bena',
          'users': [this.users.models[0]],
          'creator': this.users.models[0]
        });
        rooms.join_user('bena', this.users.models[1]);
        rooms.left_user(this.users.models[0]);
        assert.equal('bena', spy.getCall(0).args[0].get('id'));
        assert.equal('unique', spy.getCall(0).args[1].get('id'));
        assert.equal(1, spy.callCount);
        assert.equal(rooms.get('bena').get('users').length, 1);
        return assert.equal(null, this.users.models[0].get('room'));
      });
      return it('left last user and destroy room', function() {
        var rooms, spy;
        rooms = new Rooms();
        spy = sinon.spy();
        rooms.on('remove', spy);
        rooms.add({
          'id': 'bena',
          'users': [this.users.models[0]],
          'creator': this.users.models[0]
        });
        rooms.left_user(this.users.models[0]);
        assert.equal('bena', spy.getCall(0).args[0].get('id'));
        return assert.equal(0, rooms.models.length);
      });
    });
    describe('toJSON', function() {
      return it('attributes', function() {
        var rooms;
        rooms = new Rooms(null, {
          'max': 3
        });
        rooms.add({
          'users': [this.users.models[0]]
        });
        rooms.add({
          'users': [this.users.models[1], this.users.models[2], this.users.models[3]],
          'type': ['d']
        });
        assert.deepEqual({
          'id': 1,
          'max': 3,
          'users': [
            {
              'id': 'unique',
              'name': 'lietotajs 1'
            }
          ]
        }, rooms.toJSON()[0]);
        assert.equal(3, rooms.toJSON()[1]['max']);
        assert.deepEqual(2, rooms.toJSON()[1]['id']);
        return assert.deepEqual([
          {
            'id': 'unique 2',
            'name': 'lietotajs 2'
          }, {
            'id': 'unique 3',
            'name': 'lietotajs 3'
          }, {
            'id': 'unique 4',
            'name': 'lietotajs 4'
          }
        ], rooms.toJSON()[1]['users']);
      });
    });
    return describe('create/remove room', function() {
      it('3 max players', function() {
        var rooms,
          _this = this;
        rooms = new Rooms([], {
          'max': 3
        });
        rooms.add({
          'id': 'bena',
          'users': [this.users.models[0]],
          'creator': this.users.models[0]
        });
        rooms.join_user('bena', this.users.models[1]);
        rooms.join_user('bena', this.users.models[2]);
        return assert.throws((function() {
          return rooms.joinUser('bena', _this.users.models[3]);
        }), Error, 'full room');
      });
      return it('remove room', function() {
        var rooms, spy;
        rooms = new Rooms([], {
          'max': 3
        });
        spy = sinon.spy();
        rooms.on('remove', spy);
        rooms.add({
          'id': 'bena',
          'users': [this.users.models[0]],
          'creator': this.users.models[0]
        });
        rooms.join_user('bena', this.users.models[1]);
        rooms.join_user('bena', this.users.models[2]);
        rooms.remove(rooms.models[0]);
        assert.equal(1, spy.callCount);
        assert.equal(null, this.users.models[0].room);
        assert.equal(null, this.users.models[1].room);
        return assert.equal(null, this.users.models[2].room);
      });
    });
  });

}).call(this);
