// Generated by CoffeeScript 1.6.3
(function() {
  var Bco, Rooms, Router, Users, events, extend,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  events = require('events');

  extend = require('util')._extend;

  Users = require('../room').Users;

  Rooms = require('../room').Rooms;

  Bco = require('../bco').Bco;

  module.exports = Router = (function(_super) {
    __extends(Router, _super);

    function Router() {
      var _this = this;
      this.users = new Users();
      this.users.on('remove', function(u) {
        if (u.get('room')) {
          return _this.rooms.left_user(u);
        }
      });
      this.users.on('change:room', function(u) {
        return _this.emit_user(u, 'room:list', _this.rooms.toJSON());
      });
      this.rooms = new Rooms();
      this.rooms.on('add', function(r) {
        return _this.emit_lobby('room:add', r.toJSON());
      });
      this.rooms.on('remove', function(r) {
        return _this.emit_lobby('room:remove', {
          'id': r.id
        });
      });
      this.rooms.on('user:join', function(r, user) {
        return _this.emit_lobby('room:user_join', {
          'room_id': r.id,
          'user': user.user_data()
        });
      });
      this.rooms.on('user:left', function(r, user) {
        if (r.get('users').length > 0) {
          return _this.emit_lobby('room:user_left', {
            'room_id': r.id,
            'user_id': user.id
          });
        }
      });
    }

    Router.prototype.connection = function(socket) {
      var user,
        _this = this;
      user = new this.users.model({
        'socket': socket
      });
      this.users.add(user);
      socket.on('login:try', function() {
        user.set({
          'id': socket.id,
          'name': 'Guest ' + socket.id
        });
        _this.emit_user(user, 'login:success', user.user_data(true));
        return user.set({
          'room': null
        });
      });
      socket.on('room:create', function() {
        if (!user.is_authenticated() || user.get('room')) {
          return;
        }
        return _this.rooms.add({
          'users': [user]
        });
      });
      socket.on('room:join', function(room) {
        var e;
        if (!user.is_authenticated()) {
          return;
        }
        try {
          return _this.rooms.join_user(room, user);
        } catch (_error) {
          e = _error;
        }
      });
      return socket.on('end', function() {
        return _this.users.remove(user);
      });
    };

    Router.prototype.emit_user = function(user, event, args) {
      return user.get('socket').emit(event, args);
    };

    Router.prototype.emit_room = function(room, event, args) {
      var _this = this;
      return room.get('users').forEach(function(u) {
        return _this.emit_user(u, event, args);
      });
    };

    Router.prototype.emit_lobby = function(event, args) {
      var _this = this;
      return this.users.each(function(u) {
        if (!u.get('room') && u.is_authenticated()) {
          return _this.emit_user(u, event, args);
        }
      });
    };

    return Router;

  })(events.EventEmitter);

}).call(this);
