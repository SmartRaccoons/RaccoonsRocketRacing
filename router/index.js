// Generated by CoffeeScript 1.6.3
(function() {
  var Bco, Rooms, Router, Users, events, extend, map,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  events = require('events');

  extend = require('util')._extend;

  Users = require('../room').Users;

  Rooms = require('../room').Rooms;

  Bco = require('../bco').Bco;

  map = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 1, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 1, 0, 0, 2, 2], [2, 2, 0, 0, 1, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 1, 0, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];

  module.exports = Router = (function(_super) {
    __extends(Router, _super);

    function Router() {
      var join_user,
        _this = this;
      this.users = new Users();
      this.users.on('remove', function(u) {
        if (u.get('room')) {
          return _this.rooms.user_left(u);
        }
      });
      this.users.on('change:room', function(u) {
        if (u.get('room') === null) {
          return _this.emit_user(u, 'room:list', _this.rooms.toJSON());
        } else {
          return _this.emit_user(u, 'game:start');
        }
      });
      this.rooms = new Rooms();
      join_user = function(u) {
        var r, x, y;
        r = u.get('room');
        _this.emit_user(u, 'game:elements', r.game._elements);
        x = 0;
        y = 0;
        if (u.get('team') > 0) {
          y = r.game.size[1] - 32;
        }
        if (r.get('teams')[u.get('team')].length > 1 && r.game.get_tank(r.get('teams')[0][0]).pos_start[0] === 0) {
          x = r.game.size[0] - 32;
        }
        return r.game.add_tank(u.id, {
          'pos': [x, y]
        });
      };
      this.rooms.on('add', function(r) {
        _this.emit_lobby('room:room_add', r.toJSON());
        r.game = new Bco(map);
        r.game.on('add', function(pr) {
          return _this.emit_room(r, 'game:add', pr);
        });
        r.game.on('update', function(pr) {
          return _this.emit_room(r, 'game:update', extend({
            'pos': r.game.get(pr.id).pos
          }, pr));
        });
        r.game.on('restart', function() {
          return _this.emit_room(r, 'game:restart');
        });
        r.game.on('destroy', function(pr) {
          var element;
          _this.emit_room(r, 'game:destroy', pr);
          element = r.game.get(pr.id);
          if (element && element.object === 'base') {
            return r.game.restart();
          }
        });
        r.game.start();
        return r.get('users').forEach(join_user);
      });
      this.rooms.on('remove', function(r) {
        r.game.stop();
        return _this.emit_lobby('room:room_remove', {
          'id': r.id
        });
      });
      this.rooms.on('user:join', function(r, user) {
        _this.emit_lobby('room:user_join', {
          'room_id': r.id,
          'user': user.user_data()
        });
        return join_user(user);
      });
      this.rooms.on('user:left', function(r, user) {
        r.game.destroy_tank(user.id);
        if (r.get('users').length > 0) {
          return _this.emit_lobby('room:user_left', {
            'room_id': r.id,
            'user_id': user.id
          });
        }
      });
    }

    Router.prototype.connection = function(socket) {
      var user,
        _this = this;
      user = new this.users.model({
        'socket': socket
      });
      this.users.add(user);
      socket.on('login:try', function() {
        user.set({
          'id': socket.id,
          'name': 'Guest ' + socket.id
        });
        _this.emit_user(user, 'login:success', user.user_data(true));
        return user.set({
          'room': null
        });
      });
      socket.on('room:create', function() {
        if (!user.is_authenticated() || user.get('room')) {
          return;
        }
        return _this.rooms.add({
          'users': [user],
          'stage': 1,
          'teams': [[user.id], []]
        });
      });
      socket.on('room:join', function(pr) {
        var e;
        if (!user.is_authenticated()) {
          return;
        }
        try {
          return _this.rooms.user_join(user, pr);
        } catch (_error) {
          e = _error;
        }
      });
      socket.on('room:left', function() {
        var e;
        try {
          return _this.rooms.user_left(user);
        } catch (_error) {
          e = _error;
        }
      });
      socket.on('end', function() {
        return _this.users.remove(user);
      });
      return socket.on('control', function(p) {
        if (!user.get('room')) {
          return;
        }
        return user.get('room').game[p.active ? 'tank_start' : 'tank_stop'](user.id, p.move);
      });
    };

    Router.prototype.emit_user = function(user, event, args) {
      return this.emit_socket(user.get('socket'), event, args);
    };

    Router.prototype.emit_socket = function(socket, event, args) {
      return socket.emit(event, args);
    };

    Router.prototype.emit_room = function(room, event, args) {
      var _this = this;
      return room.get('users').forEach(function(u) {
        return _this.emit_user(u, event, args);
      });
    };

    Router.prototype.emit_lobby = function(event, args) {
      var _this = this;
      return this.users.each(function(u) {
        if (!u.get('room') && u.is_authenticated()) {
          return _this.emit_user(u, event, args);
        }
      });
    };

    return Router;

  })(events.EventEmitter);

}).call(this);
